{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\src\\App.svelte",
    "..\\src\\LoginForm.svelte",
    "..\\src\\SignUp.svelte"
  ],
  "sourcesContent": [
    "<script>\r\n  import { onMount, setContext } from \"svelte\";\r\n  import router from \"page\";\r\n  import routes from \"./route\";\r\n  let page = null;\r\n  let params = {};\r\n  let user = false;\r\n  routes.forEach(route => {\r\n\t// Loop around all of the routes and create a new instance of\r\n  // router for reach one with some rudimentary checks.\r\n    router(\r\n      route.path,\r\n\t\t\t// Set the params variable to the context.\r\n      // We use this on the component initialisation\r\n      (ctx, next) => {\r\n        params = { ...ctx.params };\r\n        next();\r\n      },\r\n\t\t\t// Check if auth is valid. If so, set the page to the component\r\n      // otherwise redirect to login.\r\n      () => {\r\n        if (route.auth && !user) {\r\n          router.redirect(\"/\");\r\n        } else {\r\n          page = route.component;\r\n        }\r\n      }\r\n    );\r\n  });\r\n\r\n\trouter.start();\r\n  import {\r\n    key as userContextKey,\r\n    initialValue as userContextInitialValue\r\n  } from \"./userContext\";\r\n\r\n  import LoginForm from \"./LoginForm.svelte\";\r\n\r\n  onMount(() => {\r\n    setContext(userContextKey, userContextInitialValue);\r\n  });\r\n\r\n  const submit = ({ email, password }) =>\r\n    new Promise((resolve, reject) => {\r\n      setTimeout(() => {\r\n        setContext(userContextKey, {\r\n          name: \"Foo\",\r\n          lastName: \"Bar\",\r\n          email: \"foo@bar.com\"\r\n        });\r\n        resolve();\r\n      }, 1000);\r\n    });\r\n  import ApolloClient from \"apollo-boost\";\r\n  import { setClient } from \"svelte-apollo\";\r\n  const client = new ApolloClient({\r\n    uri: \"http://localhost:4000/graphql\",\r\n    onError: ({ networkError, graphQLErrors }) => {\r\n      console.log(\"graphQLErrors\", graphQLErrors);\r\n      console.log(\"networkError\", networkError);\r\n    }\r\n  });\r\n  setClient(client);\r\n</script>\r\n\r\n<style>\r\n  section {\r\n    height: 100vh;\r\n    width: 100%;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n    background: linear-gradient(to right, #cd76e2, #e358ab);\r\n  }\r\n</style>\r\n\r\n<section>\r\n  <main>\r\n    <svelte:component this={page} {params} />\r\n  </main>\r\n</section>\r\n",
    "<script>\r\n  import { mutation } from \"svelte-apollo\";\r\n  import gql from 'graphql-tag';\r\n\r\n  let isLoading = false;\r\n\r\n  let isSuccess = false;\r\n\r\n  let errors = {};\r\n  const REGISTER = gql`\r\n    mutation($email: String!, $password:String!){\r\n      login(email: $email, password: $password){\r\n        id,\r\n        email,\r\n        createdAt\r\n      }\r\n    }\r\n  `;\r\n  const register = mutation(REGISTER);\r\n  let email = \"\";\r\n  let password = \"\";\r\n  async function handleSubmit() {\r\n    errors = {};\r\n\r\n    if (email.length === 0) {\r\n      errors.email = \"Field should not be empty\";\r\n    }\r\n    if (password.length === 0) {\r\n      errors.password = \"Field should not be empty\";\r\n    }\r\n\r\n    if (Object.keys(errors).length === 0) {\r\n      isLoading = true;\r\n      try {\r\n            await register({ variables: { email, password } })  ;\r\n          } catch (error) {\r\n            errors.server = error;\r\n            isLoading = false;\r\n          } finally {\r\n            if (isLoading === false) {\r\n              isSuccess = false;\r\n            } else {\r\n              isSuccess = true;\r\n              isLoading = false;\r\n            }\r\n          }\r\n          \r\n    }\r\n  };\r\n</script>\r\n\r\n<style>\r\n  form {\r\n    background: #fff;\r\n    padding: 50px;\r\n    width: 250px;\r\n    height: 400px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;\r\n    box-shadow: 0px 20px 14px 8px rgba(0, 0, 0, 0.58);\r\n  }\r\n\r\n  label {\r\n    margin: 10px 0;\r\n    align-self: flex-start;\r\n    font-weight: 500;\r\n  }\r\n\r\n  input {\r\n    border: none;\r\n    border-bottom: 1px solid #ccc;\r\n    margin-bottom: 20px;\r\n    transition: all 300ms ease-in-out;\r\n    width: 100%;\r\n  }\r\n\r\n  input:focus {\r\n    outline: 0;\r\n    border-bottom: 1px solid #666;\r\n  }\r\n\r\n  button {\r\n    margin-top: 20px;\r\n    background: black;\r\n    color: white;\r\n    padding: 10px 0;\r\n    width: 200px;\r\n    border-radius: 25px;\r\n    text-transform: uppercase;\r\n    font-weight: bold;\r\n    cursor: pointer;\r\n    transition: all 300ms ease-in-out;\r\n  }\r\n\r\n  button:hover {\r\n    transform: translateY(-2.5px);\r\n    box-shadow: 0px 1px 10px 0px rgba(0, 0, 0, 0.58);\r\n  }\r\n\r\n  h1 {\r\n    margin: 10px 20px 30px 20px;\r\n    font-size: 40px;\r\n  }\r\n\r\n  .errors {\r\n    list-style-type: none;\r\n    padding: 10px;\r\n    margin: 0;\r\n    border: 2px solid #be6283;\r\n    color: #be6283;\r\n    background: rgba(190, 98, 131, 0.3);\r\n  }\r\n\r\n  .success {\r\n    font-size: 24px;\r\n    text-align: center;\r\n  }\r\n</style>\r\n\r\n<form on:submit|preventDefault={handleSubmit}>\r\n  {#if isSuccess}\r\n    <div class=\"success\">\r\n      ðŸ”“\r\n      <br />\r\n      You've been successfully logged in.\r\n    </div>\r\n  {:else}\r\n    <h1>ðŸ‘¤</h1>\r\n\r\n    <label>Email</label>\r\n    <input name=\"email\" placeholder=\"name@example.com\" bind:value={email} />\r\n\r\n    <label>Password</label>\r\n    <input name=\"password\" type=\"password\" bind:value={password} />\r\n\r\n    <button type=\"submit\">\r\n      {#if isLoading}Logging in...{:else}Log in ðŸ”’{/if}\r\n    </button>\r\n\r\n    {#if Object.keys(errors).length > 0}\r\n      <ul class=\"errors\">\r\n        {#each Object.keys(errors) as field}\r\n          <li>{field}: {errors[field]}</li>\r\n        {/each}\r\n      </ul>\r\n    {/if}\r\n  {/if}\r\n</form>\r\n",
    "<script>\r\n    import { mutation } from \"svelte-apollo\";\r\n    import gql from 'graphql-tag';\r\n  \r\n    let isLoading = false;\r\n  \r\n    let isSuccess = false;\r\n  \r\n    let errors = {};\r\n    const REGISTER = gql`\r\n      mutation($email: String!, $password:String!){\r\n        register(email: $email, password: $password){\r\n          id,\r\n          email,\r\n          createdAt\r\n        }\r\n      }\r\n    `;\r\n    const register = mutation(REGISTER);\r\n    let email = \"\";\r\n    let password = \"\";\r\n    async function handleSubmit() {\r\n      errors = {};\r\n  \r\n      if (email.length === 0) {\r\n        errors.email = \"Field should not be empty\";\r\n      }\r\n      if (password.length === 0) {\r\n        errors.password = \"Field should not be empty\";\r\n      }\r\n  \r\n      if (Object.keys(errors).length === 0) {\r\n        isLoading = true;\r\n        try {\r\n              await register({ variables: { email, password } });\r\n            } catch (error) {\r\n              errors.server = error;\r\n              isLoading = false;\r\n            } finally {\r\n              if (isLoading === false) {\r\n                isSuccess = false;\r\n              } else {\r\n                isSuccess = true;\r\n                isLoading = false;\r\n                console.log(id)\r\n              }\r\n            }\r\n            \r\n      }\r\n    };\r\n  </script>\r\n  \r\n  <style>\r\n    form {\r\n      background: #fff;\r\n      padding: 50px;\r\n      width: 250px;\r\n      height: 400px;\r\n      display: flex;\r\n      flex-direction: column;\r\n      justify-content: center;\r\n      align-items: center;\r\n      box-shadow: 0px 20px 14px 8px rgba(0, 0, 0, 0.58);\r\n    }\r\n  \r\n    label {\r\n      margin: 10px 0;\r\n      align-self: flex-start;\r\n      font-weight: 500;\r\n    }\r\n  \r\n    input {\r\n      border: none;\r\n      border-bottom: 1px solid #ccc;\r\n      margin-bottom: 20px;\r\n      transition: all 300ms ease-in-out;\r\n      width: 100%;\r\n    }\r\n  \r\n    input:focus {\r\n      outline: 0;\r\n      border-bottom: 1px solid #666;\r\n    }\r\n  \r\n    button {\r\n      margin-top: 20px;\r\n      background: black;\r\n      color: white;\r\n      padding: 10px 0;\r\n      width: 200px;\r\n      border-radius: 25px;\r\n      text-transform: uppercase;\r\n      font-weight: bold;\r\n      cursor: pointer;\r\n      transition: all 300ms ease-in-out;\r\n    }\r\n  \r\n    button:hover {\r\n      transform: translateY(-2.5px);\r\n      box-shadow: 0px 1px 10px 0px rgba(0, 0, 0, 0.58);\r\n    }\r\n  \r\n    h1 {\r\n      margin: 10px 20px 30px 20px;\r\n      font-size: 40px;\r\n    }\r\n  \r\n    .errors {\r\n      list-style-type: none;\r\n      padding: 10px;\r\n      margin: 0;\r\n      border: 2px solid #be6283;\r\n      color: #be6283;\r\n      background: rgba(190, 98, 131, 0.3);\r\n    }\r\n  \r\n    .success {\r\n      font-size: 24px;\r\n      text-align: center;\r\n    }\r\n  </style>\r\n  \r\n  <form on:submit|preventDefault={handleSubmit}>\r\n    {#if isSuccess}\r\n      <div class=\"success\">\r\n        ðŸ”“\r\n        <br />\r\n        You've been successfully logged in.\r\n      </div>\r\n    {:else}\r\n      <h1>ðŸ‘¤</h1>\r\n  \r\n      <label>Email</label>\r\n      <input name=\"email\" placeholder=\"name@example.com\" bind:value={email} />\r\n  \r\n      <label>Password</label>\r\n      <input name=\"password\" type=\"password\" bind:value={password} />\r\n  \r\n      <button type=\"submit\">\r\n        {#if isLoading}Logging in...{:else}Log in ðŸ”’{/if}\r\n      </button>\r\n  \r\n      {#if Object.keys(errors).length > 0}\r\n        <ul class=\"errors\">\r\n          {#each Object.keys(errors) as field}\r\n            <li>{field}: {errors[field]}</li>\r\n          {/each}\r\n        </ul>\r\n      {/if}\r\n    {/if}\r\n  </form>\r\n  "
  ],
  "names": [],
  "mappings": "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"
}